{
    "collab_server" : "",
    "contents" : "---\ntitle: 'Parse WorkFlowy Journal'\nauthor: \"kyle wurtz\"\ndate: \"`r Sys.Date()`\"\noutput: \n  html_notebook:\n    toc: true\n    theme: yeti\n    code_folding: show\n---\n\n## Setup\n### Load Packages\n```{r load packages, warning = FALSE, message = FALSE}\nrequire(tidyverse)\nrequire(magrittr)\nrequire(xml2)\nrequire(stringr)\nrequire(lubridate)\n```\n\n### Read Day Data\n```{r read in sample day data, eval = FALSE}\n# read in data in opml format\nday = read_xml(\"../Data/Input/day.txt\")\nday = xml_children(day)[2] # get rid of head\nday = xml_child(day, 1) # get XML node\n\n# get string for date\ndate = xml_attr(day, \"text\")\n\n# save date2 field\nd = strsplit(strsplit(date, \" \")[[1]][2], \".\", fixed = TRUE)\nmon = str_pad(d[[1]][1], 2, pad = \"0\")\ndom = str_pad(d[[1]][2], 2, pad = \"0\")\ndate2 = paste0(2016, mon, dom)\nrm(list = c(\"d\", \"mon\", \"dom\"))\n```\n\n### Read Month Data\n```{r read in sample month data, eval = FALSE}\n# read in month data in opml format\nmonth = read_xml(\"../Data/Input/month.txt\")\nmonth = xml_children(month)[2] # get rid of head\nmonth = xml_child(month, 1) # get XML node\n```\n\n### Read Year Data\n```{r read in sample year data}\n# read in year data in opml format\nyear = read_xml(\"../Data/Input/year.txt\")\nyear = xml_children(year)[2] # get rid of head\nyear = xml_child(year, 1) # get XML node\n```\n\n\n### Set Up Days Data Frame\n```{r set up days data frame}\n# get all days in the year\ndays_in_year = as.character(seq(as.Date(\"2016-01-01\"), as.Date(\"2016-12-31\"), by = \"days\"))\ndays_in_year = gsub(pattern = \"-\", replacement = \"\", x = days_in_year)\nnum_days = length(days_in_year)\n\n# set up days data frame\ndays = tibble(\n  day = days_in_year,\n  poms_tot = rep(NA, num_days),\n  poms_tot_w = rep(NA, num_days),\n  poms_tot_g = rep(NA, num_days),\n  poms_tot_h = rep(NA, num_days),\n  poms_tot_m = rep(NA, num_days),\n  inters_tot = rep(NA, num_days),\n  inters_tot_p = rep(NA, num_days),\n  inters_tot_m = rep(NA, num_days),\n  inters_tot_s = rep(NA, num_days),\n  inters_tot_o = rep(NA, num_days)\n)\n```\n\n### Set Up Pomodoros Data Frame\n```{r set up pomodoros data frame}\npomodoros = tibble(\n  date = \"date\",\n  id = -1,\n  type = \"WGHM\",\n  proj = \"ProjectName\",\n  proj_count = -1,\n  desc = \"Description\"\n)\n```\n\n### Function to Get Date from Day Node\n```{r get date from day node}\ngetDate = function(day) {\n  # get string for date\n  date = xml_attr(day, \"text\")\n  \n  # save date2 field\n  d = strsplit(strsplit(date, \" \")[[1]][2], \".\", fixed = TRUE)\n  mon = str_pad(d[[1]][1], 2, pad = \"0\")\n  dom = str_pad(d[[1]][2], 2, pad = \"0\")\n  date2 = paste0(2016, mon, dom)\n  \n  return(date2)\n}\n```\n\n\n### Function to Get Pomodoros\n```{r get pomodoros for a day}\n# get total pomodoros from a day\ngetTotPom = function(t, n) {\n  t = xml_child(t, n)\n  t %<>% xml_attr(\"text\") %>% str_split(\":\")\n  t = t[[1]][2] %>% str_trim() %>% as.integer()\n  return(t)\n}\n\ngetDaysPomodoros = function(day) {\n  # get pretty date\n  date = getDate(day)\n  \n  # get pomodoros in day\n  poms = xml_children(day)[1]\n  \n  # pomodoros total\n  poms_tot = xml_child(poms, 1)\n  poms_tot_w = getTotPom(poms_tot, 1) # work\n  poms_tot_g = getTotPom(poms_tot, 2) # growth\n  poms_tot_h = getTotPom(poms_tot, 3) # health\n  poms_tot_m = getTotPom(poms_tot, 4) # misc\n  \n  # if no pomodoros, can skip the rest of this\n  if(!(is.na(poms_tot_w) & is.na(poms_tot_g) & is.na(poms_tot_h) & is.na(poms_tot_m))) {\n    # only proceed if they're not all NAs\n    # pomodoro records\n    pom_records = data_frame(\n      date = rep(date, 100),\n      id = 1:100,\n      type = rep(NA, 100),\n      proj = rep(NA, 100),\n      proj_count = rep(NA, 100),\n      desc = rep(NA, 100)\n    )\n    \n    # loop through each of pomodoros and log it\n    for (r in 2:length(xml_children(poms))) {\n      n = r - 1\n      \n      # get individual record\n      pom_rec = xml_child(poms, r) %>%\n        xml_child() %>%\n        xml_attr(\"text\") %>%\n        str_split(\":\", 2) %>%\n        .[[1]] %>%\n        str_trim()\n      \n      # get pomodoro type\n      pom_rec_type = pom_rec[1]\n      \n      # get pomodoro description\n      pom_rec_desc = pom_rec[2]\n      \n      # get project type (if applicable)\n      proj_check = pom_rec_desc %>%\n        str_split(\"@\") %>%\n        .[[1]] %>%\n        length()\n      if (proj_check == 2) {\n        pom_rec_proj = pom_rec_desc %>%\n          str_split(\"@\") %>%\n          .[[1]] %>%\n          .[2] %>%\n          str_split(\" \") %>%\n          .[[1]] %>%\n          .[1]\n        \n        if (grepl(\"\\\\[\", pom_rec_desc)) {\n          pom_rec_proj_count = pom_rec_desc %>%\n            str_split(\"\\\\[\", 2) %>%\n            .[[1]] %>%\n            .[2] %>%\n            str_split(\"\\\\]\", 2) %>%\n            .[[1]] %>%\n            .[1] %>%\n            as.integer()\n          \n          pom_rec_desc %<>%\n            str_split(\"]\") %>%\n            .[[1]] %>%\n            .[2] %>%\n            str_trim()\n        } else {\n          pom_rec_proj_count = NA\n        }\n        \n        proj_bool = pom_rec_desc %>%\n          str_split(\" \") %>%\n          .[[1]] %>%\n          grepl(\"@\", .)\n        pom_rec_desc %<>%\n          str_split(\" \") %>%\n          .[[1]] %>%\n          subset(!proj_bool) %>%\n          paste(collapse = \" \")\n        \n      } else {\n        pom_rec_proj = NA\n        pom_rec_proj_count = NA\n      }\n      \n      # add results to pom_records\n      pom_records$type[n] = pom_rec_type\n      pom_records$proj[n] = pom_rec_proj\n      pom_records$proj_count[n] = pom_rec_proj_count\n      pom_records$desc[n] = pom_rec_desc\n    }\n  \n    # filter out extra rows\n    pom_records %<>% filter(!is.na(type))\n    \n    # add to pomodoros data frame\n    pomodoros %<>% rbind(pom_records)\n    \n    # add totals to days data frame\n    days$poms_tot[days$day == date] = nrow(pom_records)\n    days$poms_tot_w[days$day == date] = pom_records %>% filter(type == \"W\") %>% nrow()\n    days$poms_tot_g[days$day == date] = pom_records %>% filter(type == \"G\") %>% nrow()\n    days$poms_tot_h[days$day == date] = pom_records %>% filter(type == \"H\") %>% nrow()\n    days$poms_tot_m[days$day == date] = pom_records %>% filter(type == \"M\") %>% nrow()\n    \n    # save results to global environment\n    assign(\"days\", days, envir = .GlobalEnv)\n    assign(\"pomodoros\", pomodoros, envir = .GlobalEnv)\n  }\n\n}\n```\n\n### Function to Get Interruptions\n```{r get interruptions in a day}\n# get total interruptions for a day\ngetTotInter = function(t, n) {\n  t = xml_child(t, n)\n  t %<>% xml_attr(\"text\") %>% str_split(\":\")\n  t = t[[1]][2] %>% str_trim() %>% as.integer()\n  return(t)\n}\n\ngetDaysInterruptions = function(day) {\n  # get pretty date\n  date = getDate(day)\n  \n  # get interruptions in a day\n  inters = xml_children(day)[2]\n  \n  ## interruptions total\n  inters_tot_p = getTotInter(inters, 1) # peer\n  inters_tot_m = getTotInter(inters, 2) # manager\n  inters_tot_s = getTotInter(inters, 3) # self\n  inters_tot_o = getTotInter(inters, 4) # other\n  inters_tot = sum(inters_tot_p, inters_tot_m, inters_tot_s, inters_tot_o, na.rm = T)\n  \n  # if no interruptions, can skip the rest of this\n  if (!(is.na(inters_tot_p) & is.na(inters_tot_m) & is.na(inters_tot_s) & is.na(inters_tot_o))) {\n    # only proceed if they're not all NA\n    \n    # add totals to days data frame\n    days$inters_tot[days$day == date] = inters_tot\n    days$inters_tot_p[days$day == date] = inters_tot_p\n    days$inters_tot_m[days$day == date] = inters_tot_m\n    days$inters_tot_s[days$day == date] = inters_tot_s\n    days$inters_tot_o[days$day == date] = inters_tot_o\n    \n    # save result to global environment\n    assign(\"days\", days, envir = .GlobalEnv)\n  }\n\n}\n```\n\n\n## Get Results for a Single Day\n```{r test results for a single day, eval = FALSE}\n# getDaysPomodoros(day)\n# getDaysInterruptions(day)\n```\n\n\n## Get Results for a Single Month\n```{r test results for a single month}\ngetMonthResults = function(month) {\n  for (day in xml_children(month)) {\n    getDaysPomodoros(day)\n    getDaysInterruptions(day)\n  }\n}\n```\n\n## Get Results for a Single Year\n```{r test results for a single year}\nfor (month in xml_children(year)) {\n  getMonthResults(month)\n}\n```\n\n## Graph Pomodoros Over Time\nI'll update this later and make it pretty...just wanted to do a quick graph before calling it quits for the night!.\n```{r, quick graph of pomodoros over time}\ndays %>% \n  ggplot(., aes(x = day, y = poms_tot, group = 1)) +\n  geom_point() + geom_line()\n```\n\n\n## Save Output\n```{r save csv output files}\nwrite_csv(days, \"../Data/Output/days.csv\")\nwrite_csv(pomodoros, \"../Data/Output/pomodoros.csv\")\n```\n\n",
    "created" : 1478568369797.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2133122055",
    "id" : "E4A16F8E",
    "lastKnownWriteTime" : 1478609833,
    "last_content_update" : 1478609836225,
    "path" : "~/Dropbox/R/Parse WorkFlowy Journal/Code/Parse WorkFlowy Journal.Rmd",
    "project_path" : "Code/Parse WorkFlowy Journal.Rmd",
    "properties" : {
        "chunk_output_type" : "inline"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}