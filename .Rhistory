pom_rec_type = pom_rec[1]
# get pomodoro description
pom_rec_desc = pom_rec[2]
# get project type (if applicable)
proj_check = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
length()
if (proj_check == 2) {
pom_rec_proj = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
.[2] %>%
str_split(" ") %>%
.[[1]] %>%
.[1]
if (grepl("\\[", pom_rec_desc)) {
pom_rec_proj_count = pom_rec_desc %>%
str_split("\\[", 2) %>%
.[[1]] %>%
.[2] %>%
str_split("\\]", 2) %>%
.[[1]] %>%
.[1] %>%
as.integer()
pom_rec_desc %<>%
str_split("]") %>%
.[[1]] %>%
.[2] %>%
str_trim()
} else {
pom_rec_proj_count = NA
}
proj_bool = pom_rec_desc %>%
str_split(" ") %>%
.[[1]] %>%
grepl("@", .)
pom_rec_desc %<>%
str_split(" ") %>%
.[[1]] %>%
subset(!proj_bool) %>%
paste(collapse = " ")
} else {
pom_rec_proj = NA
pom_rec_proj_count = NA
}
# add results to pom_records
pom_records$type[n] = pom_rec_type
pom_records$proj[n] = pom_rec_proj
pom_records$proj_count[n] = pom_rec_proj_count
pom_records$desc[n] = pom_rec_desc
}
# filter out extra rows
pom_records %<>% filter(!is.na(type))
# add to pomodoros data frame
pomodoros %<>% rbind(pom_records)
# add totals to days data frame
days$poms_tot[days$day == date] = nrow(pom_records)
days$poms_tot_w[days$day == date] = pom_records %>% filter(type == "W") %>% nrow()
days$poms_tot_g[days$day == date] = pom_records %>% filter(type == "G") %>% nrow()
days$poms_tot_h[days$day == date] = pom_records %>% filter(type == "H") %>% nrow()
days$poms_tot_m[days$day == date] = pom_records %>% filter(type == "M") %>% nrow()
}
# add day of week
days$day_of_week[days$day == date] = day_of_week
# save results to global environment
assign("days", days, envir = .GlobalEnv)
assign("pomodoros", pomodoros, envir = .GlobalEnv)
}
require(tidyverse)
require(magrittr)
require(xml2)
require(stringr)
require(lubridate)
# read in year data in opml format
year = read_xml("../Data/Input/year.txt")
year = xml_children(year)[2] # get rid of head
year = xml_child(year, 1) # get XML node
# get all days in the year
days_in_year = as.character(seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by = "days"))
days_in_year = gsub(pattern = "-", replacement = "", x = days_in_year)
num_days = length(days_in_year)
# set up days data frame
days = tibble(
day = days_in_year,
day_of_week = rep(NA, num_days),
poms_tot = rep(NA, num_days),
poms_tot_w = rep(NA, num_days),
poms_tot_g = rep(NA, num_days),
poms_tot_h = rep(NA, num_days),
poms_tot_m = rep(NA, num_days),
inters_tot = rep(NA, num_days),
inters_tot_p = rep(NA, num_days),
inters_tot_m = rep(NA, num_days),
inters_tot_s = rep(NA, num_days),
inters_tot_o = rep(NA, num_days)
)
pomodoros = tibble(
date = "date",
day_of_week = "MTWTFSS",
id = -1,
type = "WGHM",
proj = "ProjectName",
proj_count = -1,
desc = "Description"
)
getDate = function(day) {
# get string for date
date = xml_attr(day, "text")
# save date2 field
d = strsplit(strsplit(date, " ")[[1]][2], ".", fixed = TRUE)
mon = str_pad(d[[1]][1], 2, pad = "0")
dom = str_pad(d[[1]][2], 2, pad = "0")
date2 = paste0(2016, mon, dom)
return(date2)
}
# get total pomodoros from a day
getTotPom = function(t, n) {
t = xml_child(t, n)
t %<>% xml_attr("text") %>% str_split(":")
t = t[[1]][2] %>% str_trim() %>% as.integer()
return(t)
}
getDaysPomodoros = function(day) {
# get pretty date
date = getDate(day)
# get day of week
day_of_week = strsplit(xml_attr(day, "text"), " ")[[1]][1]
# get pomodoros in day
poms = xml_children(day)[1]
# pomodoros total
poms_tot = xml_child(poms, 1)
poms_tot_w = getTotPom(poms_tot, 1) # work
poms_tot_g = getTotPom(poms_tot, 2) # growth
poms_tot_h = getTotPom(poms_tot, 3) # health
poms_tot_m = getTotPom(poms_tot, 4) # misc
# if no pomodoros, can skip the rest of this
if(!(is.na(poms_tot_w) & is.na(poms_tot_g) & is.na(poms_tot_h) & is.na(poms_tot_m))) {
# only proceed if they're not all NAs
# pomodoro records
pom_records = data_frame(
date = rep(date, 100),
day_of_week = rep(day_of_week, 100),
id = 1:100,
type = rep(NA, 100),
proj = rep(NA, 100),
proj_count = rep(NA, 100),
desc = rep(NA, 100)
)
# loop through each of pomodoros and log it
for (r in 2:length(xml_children(poms))) {
n = r - 1
# get individual record
pom_rec = xml_child(poms, r) %>%
xml_child() %>%
xml_attr("text") %>%
str_split(":", 2) %>%
.[[1]] %>%
str_trim()
# get pomodoro type
pom_rec_type = pom_rec[1]
# get pomodoro description
pom_rec_desc = pom_rec[2]
# get project type (if applicable)
proj_check = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
length()
if (proj_check == 2) {
pom_rec_proj = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
.[2] %>%
str_split(" ") %>%
.[[1]] %>%
.[1]
if (grepl("\\[", pom_rec_desc)) {
pom_rec_proj_count = pom_rec_desc %>%
str_split("\\[", 2) %>%
.[[1]] %>%
.[2] %>%
str_split("\\]", 2) %>%
.[[1]] %>%
.[1] %>%
as.integer()
pom_rec_desc %<>%
str_split("]") %>%
.[[1]] %>%
.[2] %>%
str_trim()
} else {
pom_rec_proj_count = NA
}
proj_bool = pom_rec_desc %>%
str_split(" ") %>%
.[[1]] %>%
grepl("@", .)
pom_rec_desc %<>%
str_split(" ") %>%
.[[1]] %>%
subset(!proj_bool) %>%
paste(collapse = " ")
} else {
pom_rec_proj = NA
pom_rec_proj_count = NA
}
# add results to pom_records
pom_records$type[n] = pom_rec_type
pom_records$proj[n] = pom_rec_proj
pom_records$proj_count[n] = pom_rec_proj_count
pom_records$desc[n] = pom_rec_desc
}
# filter out extra rows
pom_records %<>% filter(!is.na(type))
# add to pomodoros data frame
pomodoros %<>% rbind(pom_records)
# add totals to days data frame
days$poms_tot[days$day == date] = nrow(pom_records)
days$poms_tot_w[days$day == date] = pom_records %>% filter(type == "W") %>% nrow()
days$poms_tot_g[days$day == date] = pom_records %>% filter(type == "G") %>% nrow()
days$poms_tot_h[days$day == date] = pom_records %>% filter(type == "H") %>% nrow()
days$poms_tot_m[days$day == date] = pom_records %>% filter(type == "M") %>% nrow()
}
# add day of week
days$day_of_week[days$day == date] = day_of_week
# save results to global environment
assign("days", days, envir = .GlobalEnv)
assign("pomodoros", pomodoros, envir = .GlobalEnv)
}
# get total interruptions for a day
getTotInter = function(t, n) {
t = xml_child(t, n)
t %<>% xml_attr("text") %>% str_split(":")
t = t[[1]][2] %>% str_trim() %>% as.integer()
return(t)
}
getDaysInterruptions = function(day) {
# get pretty date
date = getDate(day)
# get interruptions in a day
inters = xml_children(day)[2]
## interruptions total
inters_tot_p = getTotInter(inters, 1) # peer
inters_tot_m = getTotInter(inters, 2) # manager
inters_tot_s = getTotInter(inters, 3) # self
inters_tot_o = getTotInter(inters, 4) # other
inters_tot = sum(inters_tot_p, inters_tot_m, inters_tot_s, inters_tot_o, na.rm = T)
# if no interruptions, can skip the rest of this
if (!(is.na(inters_tot_p) & is.na(inters_tot_m) & is.na(inters_tot_s) & is.na(inters_tot_o))) {
# only proceed if they're not all NA
# add totals to days data frame
days$inters_tot[days$day == date] = inters_tot
days$inters_tot_p[days$day == date] = inters_tot_p
days$inters_tot_m[days$day == date] = inters_tot_m
days$inters_tot_s[days$day == date] = inters_tot_s
days$inters_tot_o[days$day == date] = inters_tot_o
# save result to global environment
assign("days", days, envir = .GlobalEnv)
}
}
getMonthResults = function(month) {
for (day in xml_children(month)) {
getDaysPomodoros(day)
getDaysInterruptions(day)
}
}
for (month in xml_children(year)) {
getMonthResults(month)
}
days
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot, group = 1)) +
geom_point() + geom_line()
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot, group = 1)) +
geom_point() + geom_line() +
geom_smooth()
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot_w, group = 1)) +
geom_point() + geom_line() +
geom_smooth()
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot_g, group = 1)) +
geom_point() + geom_line() +
geom_smooth()
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot_h, group = 1)) +
geom_point() + geom_line() +
geom_smooth()
days %>%
filter(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")) %>%
ggplot(., aes(x = day, y = poms_tot_m, group = 1)) +
geom_point() + geom_line() +
geom_smooth()
require(tidyverse)
require(magrittr)
require(xml2)
require(stringr)
require(lubridate)
# read in year data in opml format
year = read_xml("../Data/Input/year.txt")
year = xml_children(year)[2] # get rid of head
year = xml_child(year, 1) # get XML node
# get all days in the year
days_in_year = as.character(seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by = "days"))
days_in_year = gsub(pattern = "-", replacement = "", x = days_in_year)
num_days = length(days_in_year)
# set up days data frame
days = tibble(
day = days_in_year,
day_of_week = rep(NA, num_days),
poms_tot = rep(NA, num_days),
poms_tot_w = rep(NA, num_days),
poms_tot_g = rep(NA, num_days),
poms_tot_h = rep(NA, num_days),
poms_tot_m = rep(NA, num_days),
inters_tot = rep(NA, num_days),
inters_tot_p = rep(NA, num_days),
inters_tot_m = rep(NA, num_days),
inters_tot_s = rep(NA, num_days),
inters_tot_o = rep(NA, num_days)
)
pomodoros = tibble(
date = "date",
day_of_week = "MTWTFSS",
id = -1,
type = "WGHM",
proj = "ProjectName",
proj_count = -1,
desc = "Description"
)
getDate = function(day) {
# get string for date
date = xml_attr(day, "text")
# save date2 field
d = strsplit(strsplit(date, " ")[[1]][2], ".", fixed = TRUE)
mon = str_pad(d[[1]][1], 2, pad = "0")
dom = str_pad(d[[1]][2], 2, pad = "0")
date2 = paste0(2016, mon, dom)
return(date2)
}
# get total pomodoros from a day
getTotPom = function(t, n) {
t = xml_child(t, n)
t %<>% xml_attr("text") %>% str_split(":")
t = t[[1]][2] %>% str_trim() %>% as.integer()
return(t)
}
getDaysPomodoros = function(day) {
# get pretty date
date = getDate(day)
# get day of week
day_of_week = strsplit(xml_attr(day, "text"), " ")[[1]][1]
# get pomodoros in day
poms = xml_children(day)[1]
# pomodoros total
poms_tot = xml_child(poms, 1)
poms_tot_w = getTotPom(poms_tot, 1) # work
poms_tot_g = getTotPom(poms_tot, 2) # growth
poms_tot_h = getTotPom(poms_tot, 3) # health
poms_tot_m = getTotPom(poms_tot, 4) # misc
# if no pomodoros, can skip the rest of this
if(!(is.na(poms_tot_w) & is.na(poms_tot_g) & is.na(poms_tot_h) & is.na(poms_tot_m))) {
# only proceed if they're not all NAs
# pomodoro records
pom_records = data_frame(
date = rep(date, 100),
day_of_week = rep(day_of_week, 100),
id = 1:100,
type = rep(NA, 100),
proj = rep(NA, 100),
proj_count = rep(NA, 100),
desc = rep(NA, 100)
)
# loop through each of pomodoros and log it
for (r in 2:length(xml_children(poms))) {
n = r - 1
# get individual record
pom_rec = xml_child(poms, r) %>%
xml_child() %>%
xml_attr("text") %>%
str_split(":", 2) %>%
.[[1]] %>%
str_trim()
# get pomodoro type
pom_rec_type = pom_rec[1]
# get pomodoro description
pom_rec_desc = pom_rec[2]
# get project type (if applicable)
proj_check = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
length()
if (proj_check == 2) {
pom_rec_proj = pom_rec_desc %>%
str_split("@") %>%
.[[1]] %>%
.[2] %>%
str_split(" ") %>%
.[[1]] %>%
.[1]
if (grepl("\\[", pom_rec_desc)) {
pom_rec_proj_count = pom_rec_desc %>%
str_split("\\[", 2) %>%
.[[1]] %>%
.[2] %>%
str_split("\\]", 2) %>%
.[[1]] %>%
.[1] %>%
as.integer()
pom_rec_desc %<>%
str_split("]") %>%
.[[1]] %>%
.[2] %>%
str_trim()
} else {
pom_rec_proj_count = NA
}
proj_bool = pom_rec_desc %>%
str_split(" ") %>%
.[[1]] %>%
grepl("@", .)
pom_rec_desc %<>%
str_split(" ") %>%
.[[1]] %>%
subset(!proj_bool) %>%
paste(collapse = " ")
} else {
pom_rec_proj = NA
pom_rec_proj_count = NA
}
# add results to pom_records
pom_records$type[n] = pom_rec_type
pom_records$proj[n] = pom_rec_proj
pom_records$proj_count[n] = pom_rec_proj_count
pom_records$desc[n] = pom_rec_desc
}
# filter out extra rows
pom_records %<>% filter(!is.na(type))
# add to pomodoros data frame
pomodoros %<>% rbind(pom_records)
# add totals to days data frame
days$poms_tot[days$day == date] = nrow(pom_records)
days$poms_tot_w[days$day == date] = pom_records %>% filter(type == "W") %>% nrow()
days$poms_tot_g[days$day == date] = pom_records %>% filter(type == "G") %>% nrow()
days$poms_tot_h[days$day == date] = pom_records %>% filter(type == "H") %>% nrow()
days$poms_tot_m[days$day == date] = pom_records %>% filter(type == "M") %>% nrow()
}
# add day of week
days$day_of_week[days$day == date] = day_of_week
# save results to global environment
assign("days", days, envir = .GlobalEnv)
assign("pomodoros", pomodoros, envir = .GlobalEnv)
}
# get total interruptions for a day
getTotInter = function(t, n) {
t = xml_child(t, n)
t %<>% xml_attr("text") %>% str_split(":")
t = t[[1]][2] %>% str_trim() %>% as.integer()
return(t)
}
getDaysInterruptions = function(day) {
# get pretty date
date = getDate(day)
# get interruptions in a day
inters = xml_children(day)[2]
## interruptions total
inters_tot_p = getTotInter(inters, 1) # peer
inters_tot_m = getTotInter(inters, 2) # manager
inters_tot_s = getTotInter(inters, 3) # self
inters_tot_o = getTotInter(inters, 4) # other
inters_tot = sum(inters_tot_p, inters_tot_m, inters_tot_s, inters_tot_o, na.rm = T)
# if no interruptions, can skip the rest of this
if (!(is.na(inters_tot_p) & is.na(inters_tot_m) & is.na(inters_tot_s) & is.na(inters_tot_o))) {
# only proceed if they're not all NA
# add totals to days data frame
days$inters_tot[days$day == date] = inters_tot
days$inters_tot_p[days$day == date] = inters_tot_p
days$inters_tot_m[days$day == date] = inters_tot_m
days$inters_tot_s[days$day == date] = inters_tot_s
days$inters_tot_o[days$day == date] = inters_tot_o
# save result to global environment
assign("days", days, envir = .GlobalEnv)
}
}
getMonthResults = function(month) {
for (day in xml_children(month)) {
getDaysPomodoros(day)
getDaysInterruptions(day)
}
}
for (month in xml_children(year)) {
getMonthResults(month)
}
write_csv(days, "../Data/Output/days.csv")
write_csv(pomodoros, "../Data/Output/pomodoros.csv")
getMonthResults = function(month) {
for (day in xml_children(month)) {
getDaysPomodoros(day)
getDaysInterruptions(day)
}
}
install.packages("rprojroot")
require(knitr)
require(rprojroot)
opts_knit$set(root.dir = rprojroot::find_root("WorkFlowy Journal.Rproj"))
year_2015 = read_xml("Data/Input/year_2015.txt")
